<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:Command="http://www.galasoft.ch/mvvmlight"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:Controls="clr-namespace:codingfreaks.pping.Ui.WindowsApp.Controls"
    xmlns:Converters="clr-namespace:codingfreaks.cfUtils.Logic.Wpf.Converters;assembly=cfUtils.cfWpfUtils"
    x:Name="window" x:Class="codingfreaks.pping.Ui.WindowsApp.MainWindow"
    mc:Ignorable="d"
    Title="{Binding Title}" 
    Left="{Binding Options.WindowLeft, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
    Top="{Binding Options.WindowTop, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
    Height="{Binding Options.WindowHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
    Width="{Binding Options.WindowWidth, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
    MinHeight="600"  
    MinWidth="800"    
    WindowState="{Binding Options.WindowState, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
    WindowStartupLocation="CenterScreen">
    <Window.Resources>
        <Converters:InverseBoolConverter x:Key="InverseBoolConverter" />
        <Style TargetType="{x:Type Button}" x:Key="GridButton">
            <Setter Property="Padding" Value="2" />
            <Setter Property="Width" Value="32" />
            <Setter Property="Margin" Value="0,4" />
        </Style>
        <Style TargetType="{x:Type StackPanel}" x:Key="LinkLabelList">
            <Setter Property="Orientation" Value="Horizontal" />
            <Setter Property="Margin" Value="0,5,0,5" />
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="LinkLabel">
            <Setter Property="Margin" Value="0,0,5,0" />
        </Style>
        <Style x:Key="HyperlinkLikeButton" TargetType="{x:Type Button}">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <TextBlock>
                            <Hyperlink TextDecorations="{x:Null}">
                                <Run Text="{TemplateBinding Content}" />
                            </Hyperlink>
                        </TextBlock>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Margin" Value="0,0,5,0" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <ControlTemplate.Resources>
                                    <Style TargetType="{x:Type Hyperlink}">
                                        <Setter Property="TextDecorations" Value="Underline" />
                                    </Style>
                                </ControlTemplate.Resources>
                                <ContentPresenter />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type GroupBox}">
            <Setter Property="Padding" Value="5" />
        </Style>
        <Style TargetType="{x:Type DataGridCell}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter VerticalAlignment="Center" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="DataGridCell" x:Key="RightColumn">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Right" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="DataGridCell" x:Key="CenterColumn">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Window.DataContext>
        <Binding Path="Main" Source="{StaticResource Locator}" />
    </Window.DataContext>
    <Window.IsEnabled>
        <Binding Mode="OneWay" Path="IsDataSource" Source="{StaticResource Listener}" />
    </Window.IsEnabled>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <Command:EventToCommand Command="{Binding ClosingCommand, Mode=OneWay}" />
        </i:EventTrigger>
        <!--<i:EventTrigger EventName="Loaded">
            <Command:EventToCommand Command="{Binding LoadedCommand, Mode=OneWay}" />
        </i:EventTrigger>-->
    </i:Interaction.Triggers>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" MinWidth="80" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="3*" MinWidth="80" />
        </Grid.ColumnDefinitions>
        <Grid Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition MinHeight="200" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" x:Name="propertyRow" />
            </Grid.RowDefinitions>
            <GroupBox Grid.Row="0" Header="Jobs">
                <DockPanel LastChildFill="True">
                    <StackPanel DockPanel.Dock="Top" Style="{DynamicResource LinkLabelList}">
                        <Button Style="{DynamicResource HyperlinkLikeButton}" Content="Add"
                                Command="{Binding AddJobCommand}" />
                        <Button Style="{DynamicResource HyperlinkLikeButton}" Content="Remove"
                                Command="{Binding RemoveJobCommand}"
                                CommandParameter="{Binding ElementName=window, Mode=OneWay}" />
                    </StackPanel>
                    <DataGrid
                        ItemsSource="{Binding JobDefinitionsView, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                        IsSynchronizedWithCurrentItem="True"
                        EnableRowVirtualization="True"
                        CanUserAddRows="False" AutoGenerateColumns="False" DockPanel.Dock="Bottom"                       
                        SelectionMode="Single" VerticalContentAlignment="Center" GridLinesVisibility="None" IsReadOnly="True">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn Width="40" CanUserResize="False">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button
                                            Command="{Binding DataContext.StartStopJobCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}"
                                            CommandParameter="{Binding Mode=OneWay}"
                                            Style="{DynamicResource GridButton}" Content="{Binding StartStopCaption}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Width="40" CanUserResize="False" Header="State">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Controls:StateDisplayControl CurrentState="{Binding State, Mode=OneWay}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Binding="{Binding TargetAddess}" Header="Target" />
                            <DataGridTextColumn Binding="{Binding TargetPortsFormatted}" Header="Ports" />
                            <DataGridTextColumn Binding="{Binding NetworkType}" Header="Type" />
                        </DataGrid.Columns>
                        <DataGrid.ContextMenu>
                            <ContextMenu x:Name="gridMenu">
                                <MenuItem Command="{Binding AddJobCommand}" Header="Add..." />
                                <MenuItem Command="{Binding RemoveJobCommand}"
                                          CommandParameter="{Binding ElementName=window, Mode=OneWay}" Header="Remove" />
                                <MenuItem Command="{Binding StartStopJobCommand}" Header="{Binding CurrentSelectedJobDefinition.StartStopCaption, Mode=OneWay}"
                                          CommandParameter="{Binding CurrentSelectedJobDefinition}" />
                                <MenuItem Command="{Binding CleanJobHistoryCommand}" Header="Clean History"
                                          CommandParameter="{Binding CurrentSelectedJobDefinition}" />
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                    </DataGrid>
                </DockPanel>
            </GroupBox>
            <GridSplitter Grid.Row="1" Height="3" ResizeBehavior="PreviousAndNext" HorizontalAlignment="Stretch"
                          ResizeDirection="Rows" />
            <GroupBox Grid.Row="2" Header="Properties">
                <xctk:PropertyGrid  SelectedObject="{Binding CurrentSelectedJobDefinition}"
                                    IsEnabled="{Binding CurrentSelectedJobDefinition.IsBusy, Converter={StaticResource InverseBoolConverter}, Mode=OneWay}"
                                    ShowSearchBox="False" ShowTitle="False" ShowSortOptions="False" ScrollViewer.VerticalScrollBarVisibility="Auto" />
            </GroupBox>
        </Grid>
        <GridSplitter Grid.Column="1" Width="3" ResizeBehavior="PreviousAndNext" ResizeDirection="Columns" />
        <Grid Grid.Column="2">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="3"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <GroupBox Grid.Row="0" Header="Details">
                <DataGrid
                    ItemsSource="{Binding JobsView, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                    IsSynchronizedWithCurrentItem="True" EnableRowVirtualization="True"
                    CanUserAddRows="False" AutoGenerateColumns="False" DockPanel.Dock="Bottom"                
                    SelectionMode="Single" VerticalContentAlignment="Center" GridLinesVisibility="None" IsReadOnly="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Binding="{Binding State}" Header="State" />
                        <DataGridTextColumn Binding="{Binding StartedFormatted}" Header="Started" />
                        <DataGridTextColumn Binding="{Binding FinishedFormatted}" Header="Finished" />
                        <DataGridTextColumn Binding="{Binding Result.Runs.Count}" Header="Results" CellStyle="{StaticResource RightColumn}"/>
                        <DataGridTextColumn Binding="{Binding Result.Opened}" Header="Open Ports" CellStyle="{StaticResource RightColumn}" />
                        <DataGridTextColumn Binding="{Binding Result.Closed}" Header="Closed Ports" CellStyle="{StaticResource RightColumn}" />
                    </DataGrid.Columns>
                </DataGrid>
            </GroupBox>
            <GridSplitter Grid.Row="1" Height="3" ResizeBehavior="PreviousAndNext" HorizontalAlignment="Stretch"
                          ResizeDirection="Rows" />
            <GroupBox Grid.Row="2" Header="Results">
                <DataGrid
                    ItemsSource="{Binding RunsView, NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"                    
                    IsSynchronizedWithCurrentItem="True" EnableRowVirtualization="True"
                    CanUserAddRows="False" AutoGenerateColumns="False" DockPanel.Dock="Bottom"                
                    SelectionMode="Single" VerticalContentAlignment="Center" GridLinesVisibility="None" IsReadOnly="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Binding="{Binding Port}" Header="Port" />
                        <DataGridTextColumn Binding="{Binding PortPurpose}" Header="Purpose" />
                        <DataGridCheckBoxColumn Binding="{Binding PortReached}" Header="Open" CellStyle="{StaticResource CenterColumn}" />
                        <DataGridTextColumn Binding="{Binding TimestampFormatted}" Header="Timestamp" />
                        <DataGridTextColumn Binding="{Binding Duration}" Header="Duration" />
                    </DataGrid.Columns>
                </DataGrid>
            </GroupBox>
        </Grid>
    </Grid>
</Window>